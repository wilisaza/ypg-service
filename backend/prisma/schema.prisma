generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String           @id @default(uuid()) @db.Uuid
  username  String           @unique
  password  String
  email     String           @unique
  fullName  String
  isActive  Boolean          @default(true)
  role      Role             @default(USER)
  accounts  ProductAccount[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

enum Role {
  ADMIN
  USER
}

model FinancialProduct {
  id              String           @id @default(uuid()) @db.Uuid
  name            String
  type            ProductType
  description     String?
  
  // Campos específicos para AHORRO
  monthlyAmount   Float?           // Monto mensual a ahorrar
  startMonth      Int?             // Mes de inicio (1-12)
  startYear       Int?             // Año de inicio
  endMonth        Int?             // Mes objetivo (1-12)
  endYear         Int?             // Año objetivo
  penaltyAmount   Float?           // Monto de multa por pago tardío
  graceDays       Int?             @default(5) // Días de gracia antes de aplicar multa
  
  // Campos específicos para PRESTAMO
  defaultInterest Float?           // Tasa de interés por defecto
  termMonths      Int?             // Plazo en meses por defecto
  paymentMode     PaymentMode?     // Modalidad de pago del préstamo
  
  accounts        ProductAccount[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

enum ProductType {
  AHORRO
  PRESTAMO
}

enum PaymentMode {
  CUOTAS_FIJAS     // Amortización francesa - cuotas fijas
  ABONOS_LIBRES    // Abonos variables - interés mensual sobre saldo
}

model ProductAccount {
  id           String           @id @default(uuid()) @db.Uuid
  user         User             @relation(fields: [userId], references: [id])
  userId       String           @db.Uuid
  product      FinancialProduct @relation(fields: [productId], references: [id])
  productId    String           @db.Uuid
  amount       Float            // Monto base (para ahorros: meta total, para préstamos: monto a prestar)
  
  // Campos específicos para préstamos (pueden sobrescribir los defaults del producto)
  principal    Float?           // Solo para préstamos: Proyección total (amount + intereses calculados)
  interest     Float?           // Solo para préstamos: Tasa de interés específica
  startDate    DateTime?        // Solo para préstamos: Fecha de inicio del préstamo
  endDate      DateTime?        // Solo para préstamos: Fecha de finalización del préstamo
  paymentMode  PaymentMode?     // Modalidad de pago específica para este préstamo
  
  // Campos adicionales para modalidad ABONOS_LIBRES
  outstandingBalance Float?     // Saldo pendiente actual del préstamo
  lastInterestDate   DateTime?  // Última fecha de liquidación de intereses
  
  isActive     Boolean          @default(true)
  transactions Transaction[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model TransactionTypeDetail {
  id          Int             @id @default(autoincrement())
  name        String           @unique
  nature      String           // "debito" o "credito"
  transactions Transaction[]
}

model Transaction {
  id        String               @id @default(uuid()) @db.Uuid
  account   ProductAccount       @relation(fields: [accountId], references: [id])
  accountId String               @db.Uuid
  amount    Float
  type      TransactionTypeDetail @relation(fields: [typeId], references: [id])
  typeId    Int
  status    TransactionStatus    @default(PENDIENTE)
  date      DateTime             @default(now())
  dueDate   DateTime?            // Fecha de vencimiento para cuotas
  relatedTransactionId String?   @db.Uuid // ID de transacción relacionada (para multas y pagos)
  relatedTransaction Transaction? @relation("RelatedTransactions", fields: [relatedTransactionId], references: [id])
  relatedTo Transaction[]        @relation("RelatedTransactions")
  month     Int?                 // Mes de la cuota (1-12) para cuotas de ahorro
  year      Int?                 // Año de la cuota para cuotas de ahorro
  updatedAt DateTime             @updatedAt
}

enum TransactionStatus {
  PENDIENTE
  PAGADA
  VENCIDA
}


